<!doctype html>
<html lang="en">

<head>
	<%- include('../_partials/01head'); -%>
</head>

<body>
	<%- include('../_partials/05header'); -%>

	<ol class="col-sm-7 breadcrumb">
  		<li><a href="/">Home</a></li>
  		<li><a href="/examples">SS Examples</a></li>
  		<li class="active">Mongoose Examples</li>
	</ol>


	<main class="col-sm-12 container" style="min-height: 600px">

		<h1>Mongoose Examples</h1>
		For API reference visit <a href="http://mongoosejs.com/docs/api.html" target="_blank">http://mongoosejs.com/docs/api.html</a> .
		<br>Mongoose tutorial is <a href="http://mongoosejs.com/docs/2.7.x/index.html" target="_blank">here</a>.


		<br><br>
		<h4>Initial Setup</h4>
		<ol>
			<li><a href="/examples/mongoose/00setupmongo">Setup Mongo</a> - short instructions how to setup mongo database
			<li><a href="/examples/mongoose/00setupmongoose">Setup Mongoose</a> - mongoose setup and file structure in SuperMEAN
		</ol>


		<br><br>
		<h4>Schema Types</h4>
		<h5>Available Schema Types</h5>
		<ol>
			<li><a href="/examples/mongoose/01schematypes-string-callback" target="_blank">String (callback version)</a> - Options: lowercase, uppercase, trim, match, enum
			<li><a href="/examples/mongoose/01schematypes-string" target="_blank">String (bluebird promise version)</a> - Options: lowercase, uppercase, trim, match, enum
			<li><a href="/examples/mongoose/01schematypes-number" target="_blank">Number</a> - Options: min, max
			<li><a href="/examples/mongoose/01schematypes-misc" target="_blank">Date</a> - Options: -
			<li><a href="/examples/mongoose/01schematypes-misc" target="_blank">Boolean</a> - Options: -
			<li><a href="/examples/mongoose/01schematypes-misc" target="_blank">ObjectId</a> - {type: Schema.Types.ObjectId, ...}
			<li><a href="/examples/mongoose/01schematypes-misc" target="_blank">Mixed</a> - {type: Schema.Types.Mixed, ...}
			<li><a href="/examples/mongoose/01schematypes-buffer" target="_blank">Buffer</a> - {type: Buffer, ...}
		</ol>

		<br>
		<h5>Common schema field options</h5>
		<ol>
			<li><a href="/examples/mongoose/02schemaoptions-default" target="_blank">default</a> - set default value
			<li><a href="/examples/mongoose/02schemaoptions-required" target="_blank">required</a> - {required: [bool], ...} validation rule
			<li><a href="/examples/mongoose/02schemaoptions-select" target="_blank">select</a> - {select: [bool], ...} define will the path is in selected results.
				If <b>{prop: {type: String, select: false}}</b> then it can be included again with <b>.find().select('path_name')</b> .
			<li><a href="/examples/mongoose/02schemaoptions-select2" target="_blank">select with BPromise.join()</a>
			<li><a href="/examples/mongoose/02schemaoptions-getset" target="_blank">get</a> - {get: [function], ...} getter function, transform a value get from mongodb. IMPORTANT!!! <b>Schema.set('toJSON', { getters: true });</b>
			<li><a href="/examples/mongoose/02schemaoptions-getset" target="_blank">set</a> - {set: [function], ...} setter function, transform a value which will be set into mongodb
			<li><a href="/examples/mongoose/02schemaoptions-index" target="_blank">index</a> - {index: {name: 'someIndName'}} or just {index: [bool], ...} creates index
			<li><a href="/examples/mongoose/02schemaoptions-index" target="_blank">unique index</a> - index: { unique: true } or just {unique: true} creates unique index
			<li><a href="/examples/mongoose/02schemaoptions-sparse" target="_blank">sparse index</a> - {sparse: [bool], ... } creates sparse index, e.g. index which takes only docs wich contains specific field
			<li><a href="/examples/mongoose/02schemaoptions-validate" target="_blank">validate</a> - {validate: [function, regex, array], ... } validate entry for specific path
			<li><a href="/examples/mongoose/02schemaoptions-ref" target="_blank">ref</a> - {ref: [string], ... }
		</ol>


		<br><br>
		<h4>Mongoose Middleware</h4>
		Middlewares can be pre() and post() and are applied on doc methods: init, validate, save, remove.
		<br>Also on query methods like: count, find, findOne, findOneAndRemove, findOneAndUpdate, update
		<ol>
			<li><a href="/examples/mongoose/05middlewareprepost" target="_blank">pre('save', fjaMD)</a> - pre middleware
			<li><a href="/examples/mongoose/05middlewareprepost" target="_blank">post('remove', fjaMD)</a> - post middleware
		</ol>


		<br><br>
		<h4>Basic operations</h4>

		<h5>INSERT</h5>
		<ol>
			<li><a href="/examples/mongoose/10operationssave" target="_blank">save(docObj)</a> - save one doc
			<li><a href="/examples/mongoose/11operationscreate" target="_blank">create([doc1, doc2, ...])</a> - save array of docs
			<li><a href="/examples/mongoose/12operationsinsertmany" target="_blank">insertMany([doc1, doc2, ...])</a> - inserting array of docs (simmilar to create() )
			<li><a href="/examples/mongoose/13operationspopulate" target="_blank">populate()</a> -
		</ol>

		<br><h5>DELETE</h5>
		<ol>
			<li><a href="/examples/mongoose/15operationsremove" target="_blank">remove(queryObj)</a> - delete multiple documents <b>Model.remove({ _id: '578d009d0c1873663130f4d4' }, function(err, countObj) { ... })</b>
			<li><a href="/examples/mongoose/16operationsfindidremove" target="_blank">findByIdAndRemove(id)</a> - removing one doc found by id
			<li><a href="/examples/mongoose/17operationsfindoneremove" target="_blank">findOneAndRemove(queryObj)</a> - removing first doc found by queryObj
		</ol>

		<br><h5>UPDATE</h5>
		<ol>
			<li><a href="/examples/mongoose/20operationsupdate" target="_blank">update(queryObj, docNew, updOpts)</a> - update multiple documents <b>Model.updateAsync(queryObj, docNew, updOpts).then(countObj => { ... });</b>
			<li><a href="/examples/mongoose/21operationsfindidupdate" target="_blank">findByIdAndUpdate(id, docNew, updOpts)</a> - updating one doc found by id
			<li><a href="/examples/mongoose/22operationsfindoneupdate" target="_blank">findOneAndUpdate(queryObj, docNew, updOpts)</a> - removing first doc found by queryObj
		</ol>

		<br><h5>SEARCH</h5>
		<ol>
			<li><a href="/examples/mongoose/25operationsfind" target="_blank">find(queryObj, showFields, findOpts)</a> - find documents by queryObj
			<li><a href="/examples/mongoose/26operationsfindid" target="_blank">findById(id, showFields, findOpts)</a> - find a document by _id
			<li><a href="/examples/mongoose/27operationsfindone" target="_blank">findOne(queryObj, showFields, findOpts)</a> - returns only first result which match queryObj
			<li><a href="/examples/mongoose/28operationscount" target="_blank">count(queryObj)</a> - count number of docs match queryObj
			<li><a href="/examples/mongoose/28operationscountfind" target="_blank">count() with find()</a> - first count all results then return all results. Usefull in pagination!
			<li><a href="/examples/mongoose/29operationsdistinct" target="_blank">distinct(field, queryObj)</a> - returns an array of 'filed' results, which are distinct (no same elements in array)
		</ol>

		<br><h5>SEARCH QUERY</h5>
		- where, $where, select, skip, limit, asc, desc, hint
		<br>- bluebird promise  and query exec promise version (var promis = query.exec())
		<ol>
			<li><a href="/examples/mongoose/35operationsquery" target="_blank">query</a> - compound query example with bluebird promise
		</ol>


		<br><br><br><br>
		<h4>Subdocument</h4>






	</main>


	<br><br><br>
	<%- include('../_partials/20footer'); -%>
</body>
</html>

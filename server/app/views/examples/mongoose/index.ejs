<!doctype html>
<html lang="en">

<head>
	<%- include('../_partials/01head'); -%>
	<style>
		h4 {
			text-decoration: underline;
		}
	</style>
</head>

<body>
	<%- include('../_partials/05header'); -%>

	<ol class="col-sm-7 breadcrumb">
  		<li><a href="/">Home</a></li>
  		<li><a href="/examples">SS Examples</a></li>
  		<li class="active">Mongoose Examples</li>
	</ol>


	<main class="col-sm-12 container" style="min-height: 600px">

		<h1>Mongoose Examples</h1>
		For API reference visit <a href="http://mongoosejs.com/docs/api.html" target="_blank">http://mongoosejs.com/docs/api.html</a> .
		<br>Mongoose tutorial is <a href="http://mongoosejs.com/docs/2.7.x/index.html" target="_blank">here</a>.


		<br><br>
		<h4>Initial Setup</h4>
		<ol>
			<li><a href="/examples/mongoose/00setupmongo">Setup Mongo</a> - short instructions how to setup mongo database
			<li><a href="/examples/mongoose/00setupmongoose">Setup Mongoose</a> - mongoose setup and file structure in SuperMEAN (mongoose options)
		</ol>


		<br><br>
		<h4>Mongoose Schema (Model)</h4>
		<h5>Schema Types</h5>
		Doc: <a href="http://mongoosejs.com/docs/schematypes.html" target="_blank">http://mongoosejs.com/docs/schematypes.html</a>
		<ol>
			<li><a href="/examples/mongoose/01schematypes-string-callback" target="_blank">String (callback version)</a> - Options: lowercase, uppercase, trim, match, enum
			<li><a href="/examples/mongoose/01schematypes-string" target="_blank">String (bluebird promise version)</a> - Options: lowercase, uppercase, trim, match, enum
			<li><a href="/examples/mongoose/01schematypes-number" target="_blank">Number</a> - Options: min, max
			<li><a href="/examples/mongoose/01schematypes-misc" target="_blank">Date</a> - Options: -
			<li><a href="/examples/mongoose/01schematypes-misc" target="_blank">Boolean</a> - Options: -
			<li><a href="/examples/mongoose/01schematypes-misc" target="_blank">ObjectId</a> - {type: Schema.Types.ObjectId, ...}
			<li><a href="/examples/mongoose/01schematypes-misc" target="_blank">Mixed</a> - {type: Schema.Types.Mixed, ...}
			<li><a href="/examples/mongoose/01schematypes-buffer" target="_blank">Buffer</a> - {type: Buffer, ...}
		</ol>

		<br>
		<h5>Field options in schema definition</h5>
		<ol>
			<li><a href="/examples/mongoose/02schemaoptions-default" target="_blank">default</a> - set default value
			<li><a href="/examples/mongoose/02schemaoptions-required" target="_blank">required</a> - {required: [bool], ...} validation rule
			<li><a href="/examples/mongoose/02schemaoptions-select" target="_blank">select</a> - {select: [bool], ...} define will the path is in selected results.
				If <b>{prop: {type: String, select: false}}</b> then it can be included again with <b>.find().select('path_name')</b> .
			<li><a href="/examples/mongoose/02schemaoptions-select2" target="_blank">select with BPromise.join()</a>
			<li><a href="/examples/mongoose/02schemaoptions-getset" target="_blank">get</a> - {get: [function], ...} getter function, transform a value get from mongodb. IMPORTANT!!! <b>Schema.set('toJSON', { getters: true });</b>
			<li><a href="/examples/mongoose/02schemaoptions-getset" target="_blank">set</a> - {set: [function], ...} setter function, transform a value which will be set into mongodb
			<li><a href="/examples/mongoose/02schemaoptions-index" target="_blank">index</a> - {index: {name: 'someIndName'}} or just {index: [bool], ...} creates index
			<li><a href="/examples/mongoose/02schemaoptions-index" target="_blank">unique index</a> - index: { unique: true } or just {unique: true} creates unique index
			<li><a href="/examples/mongoose/02schemaoptions-sparse" target="_blank">sparse index</a> - {sparse: [bool], ... } creates sparse index, e.g. index which takes only docs wich contains specific field
			<li><a href="/examples/mongoose/08validation-validateproperty" target="_blank">validate</a> - {validate: [function, regex, array], ... } validate entry for specific path
			<li><a href="/examples/mongoose/02schemaoptions-ref" target="_blank">ref</a> - {ref: [string], ... }
		</ol>

		<blockquote><i>NOTICE:</i>
			<br>To rebuild indexes defined in mongoose schema:
				<br>a) set autoIndex: true
				<br>b) >db.schemaoptionsindex.dropIndexes()
				<br>c) restart nodejs app</blockquote>





		<br><br>
		<h4>Schema Additions</h4>
		Additions: methods, statics, query helpers, virtuals, middlewares, ...
		<br>Before tests <a href="/examples/mongoose/07schadditions-insertdocs" target="_blank">fill the database collection</a>.

		<br>
		<h5>A) Methods and statics</h5>
		Instance and static methods.
		<br>Docs:
		<a href="http://mongoosejs.com/docs/2.7.x/docs/methods-statics.html" target="_blank">http://mongoosejs.com/docs/2.7.x/docs/methods-statics.html</a>
		and <a href="http://mongoosejs.com/docs/guide.html" target="_blank">http://mongoosejs.com/docs/guide.html</a>
		<ol>
			<li><a href="/examples/mongoose/07schadditions-methods-findyounger" target="_blank">methods</a>
				<br>- instance method <b>findYounger()</b> -- var myModel = mongoose.model('modelName', MySchema); var instanceDoc = new myModel(doc); var query = instanceDoc.findYounger('modelName').where({name: /ana/ig});
			<li><a href="/examples/mongoose/07schadditions-statics-findyounger?age=13" target="_blank">statics</a>
				<br>- static method  <b>findYoungerStat()</b> -- var myModel = mongoose.model('modelName', MySchema); var query = myModel.findYoungerStat(maxAge);
		</ol>

		<br>
		<h5>B) Query helpers</h5>
		Used in a query chain like: query.where().myCustom().
		<br> Doc: <a href="http://mongoosejs.com/docs/guide.html" target="_blank">http://mongoosejs.com/docs/guide.html</a>
		<ol>
			<li><a href="/examples/mongoose/07schadditions-query-filterbyname?namePart=an" target="_blank">query helpers</a> - chainable query method <b>filterByName()</b> -- var myModel = mongoose.model('modelName', MySchema); var query = myModel.where().and().filterByName(namePart);
		</ol>

		<br>
		<h5>C) Virtuals</h5>
		Defining virtual paths which doesn't exist in mongo database but only in export.
		<br>Doc: <a href="http://mongoosejs.com/docs/2.7.x/docs/virtuals.html" target="_blank">http://mongoosejs.com/docs/2.7.x/docs/virtuals.html</a>
		<ol>
			View any of previous examples:
			<li><a href="/examples/mongoose/07schadditions-methods-findyounger" target="_blank">virtuals</a> - virtual path <b>"virt_name_age"</b>
		</ol>

		<br>
		<h5>D) Mongoose Middleware</h5>
		Middlewares can be pre() or post() and are applied on doc methods: init, validate, save, remove.
		<br>Also on query methods like: count, find, findOne, findOneAndRemove, findOneAndUpdate, update
		<ol>
			<li><a href="/examples/mongoose/07schadditions-prepost-save" target="_blank">pre() and post()</a>
				<br>pre('save', fjaMD) - two pre save middlewares executing one after other. Second is called by next()
				<br>post('remove', fjaMD) - two post middlewares. Notice that next() in post is not used and will generate error.
		</ol>

		<br>
		<h5>E) Plugins</h5>
		Docs:
		<a href="http://mongoosejs.com/docs/2.7.x/docs/plugins.html" target="_blank">http://mongoosejs.com/docs/2.7.x/docs/plugins.html</a> and
		<a href="http://mongoosejs.com/docs/plugins.html" target="_blank">http://mongoosejs.com/docs/plugins.html</a>
		<br>GLOBAL PLUGIN: Place it inside server/app/middlewares/database/mongoose.js - mongoose.plugin();
		<br>SCHEMA SPECIFIC PLUGIN: Try <a href="/examples/mongoose/07schadditions-plugin" target="_blank">plugin example</a> which automatically adds path 'id' with autoincrement.
			Refresh browser several times to see how 'id' will autoicrement.



		<br><br>
		<h4>Validation</h4>
		There are several ways of validation:
		<br>a) built-in validators: enum, min, max, ...
		<br>b) using schema path property 'validate': {validate: [function, regex, array], ... }
		<br>c) async validation with validate() method: schema.path('name').validate(cb)
		<br>d) using 'pre' middleware [Not recommended because will not generate ValidationError as a), b) and c) will.]
		<br>Docs:
		<a href="http://mongoosejs.com/docs/2.7.x/docs/validation.html" target="_blank">http://mongoosejs.com/docs/2.7.x/docs/validation.html</a> and
		<a href="http://mongoosejs.com/docs/validation.html" target="_blank">http://mongoosejs.com/docs/validation.html</a>
		<ol>
			<li><a href="/examples/mongoose/08validation-builtin" target="_blank">built-in validators</a> - usage of enum, min, max. Generates ValidatorError or CastError.
			<li><a href="/examples/mongoose/08validation-validateproperty" target="_blank">validate property</a> - usage of 'validate' property. Generates ValidatorError.
			<li><a href="/examples/mongoose/08validation-validatemethod" target="_blank">validate method</a> - usage of validate(pathValue) method
		</ol>


		<br><br>
		<h4>Indexes</h4>
		Indexes are defined through ensureIndex every time a model is compiled for a certain connection / database.
		This means that indexes will only be ensured once during the lifetime of your app.
		<br>There are two ways for creating indexes: property 'index' and schema.index() method.
		<br>Set <b>autoIndex: true</b> to build schema on NodeJS app restart.
		<br>Docs:
		<a href="http://mongoosejs.com/docs/2.7.x/docs/indexes.html" target="_blank">http://mongoosejs.com/docs/2.7.x/docs/indexes.html</a> and
		<a href="https://docs.mongodb.com/manual/indexes/" target="_blank">https://docs.mongodb.com/manual/indexes/</a>
		<ol>
			<li><a href="/examples/mongoose/09indeks-listall" target="_blank">list all</a> - list all indexes build after NodeJS restart -- modelName.collection.getIndexesAsync()
			<li><a href="/examples/mongoose/09indeks-removeall" target="_blank">remove all</a> - remove all indexes -- modelName.collection.dropIndexesAsync()
			<li><a href="/examples/mongoose/09indeks-buildind" target="_blank">build indexes</a> - create indexes from current schema when express route is started -- modelName.ensureIndexes() . This will also create collection if doesnt exist.
		</ol>


		<br><br>
		<h4>Operations</h4>

		<h5>INSERT <span class="alert-danger">(First fill mongodb with these examples in order to use other delete,search, ... examples!)</span></h5>
		<ol>
			<li><a href="/examples/mongoose/10operationssave" target="_blank">save(docObj)</a> - save one doc
			<li><a href="/examples/mongoose/11operationscreate" target="_blank">create([doc1, doc2, ...])</a> - save array of docs
			<li><a href="/examples/mongoose/12operationsinsertmany" target="_blank">insertMany([doc1, doc2, ...])</a> - inserting array of docs (simmilar to create() )
			<li><a href="/examples/mongoose/13operationspopulate" target="_blank">populate()</a> -
		</ol>

		<br><h5>DELETE</h5>
		<ol>
			<li><a href="/examples/mongoose/15operationsremove" target="_blank">remove(queryObj)</a> - delete multiple documents <b>Model.remove({ _id: '578d009d0c1873663130f4d4' }, function(err, countObj) { ... })</b>
			<li><a href="/examples/mongoose/16operationsfindidremove" target="_blank">findByIdAndRemove(id)</a> - removing one doc found by id
			<li><a href="/examples/mongoose/17operationsfindoneremove" target="_blank">findOneAndRemove(queryObj)</a> - removing first doc found by queryObj
		</ol>

		<br><h5>UPDATE</h5>
		<ol>
			<li><a href="/examples/mongoose/20operationsupdate" target="_blank">update(queryObj, docNew, updOpts)</a> - update multiple documents <b>Model.updateAsync(queryObj, docNew, updOpts).then(countObj => { ... });</b>
			<li><a href="/examples/mongoose/21operationsfindidupdate" target="_blank">findByIdAndUpdate(id, docNew, updOpts)</a> - updating one doc found by id
			<li><a href="/examples/mongoose/22operationsfindoneupdate" target="_blank">findOneAndUpdate(queryObj, docNew, updOpts)</a> - removing first doc found by queryObj
		</ol>

		<br><h5>SEARCH</h5>
		<ol>
			<li><a href="/examples/mongoose/25operationsfind" target="_blank">find(queryObj, showFields, findOpts)</a> - find documents by queryObj
			<li><a href="/examples/mongoose/26operationsfindid" target="_blank">findById(id, showFields, findOpts)</a> - find a document by _id
			<li><a href="/examples/mongoose/27operationsfindone" target="_blank">findOne(queryObj, showFields, findOpts)</a> - returns only first result which match queryObj
			<li><a href="/examples/mongoose/28operationscount" target="_blank">count(queryObj)</a> - count number of docs match queryObj
			<li><a href="/examples/mongoose/28operationscountfind" target="_blank">count() with find()</a> - first count all results then return all results. Usefull in pagination!
			<li><a href="/examples/mongoose/29operationsdistinct" target="_blank">distinct(field, queryObj)</a> - returns an array of 'filed' results, which are distinct (no same elements in array)
		</ol>

		<br><h5>SEARCH QUERY</h5>
		var query = Model.find(); var promis = query.execAsync();
		<ul>
			<li><a href="/examples/mongoose/35queryobject-byfind" target="_blank">query object -by find()</a> - query object created by find()
			<li><a href="/examples/mongoose/35queryobject-byconstructor" target="_blank">query object -by Query()</a> - query object created by Query() constructor
		</ul>
		<br><b>most used queries:</b> where, limit, skip, sort, count, distinct, regex, select
		<br><b>search queries:</b> find, findOne, findOneAndRemove, findOneAndUpdate
		<br><b>logic and comparison queries:</b> and, or, nor, equals, gt, gte, lt, lte, ne
		<br><b>array queries:</b> all, in, nin, elemMatch, size, slice
		<br><b>operational queries:</b> remove, update
		<br><b>misc:</b> $where, comment, cursor, exists, hint, merge, setOptions|sort, limit, skip, ...|
		<ol>
			<li><a href="/examples/mongoose/36querymostused-common" target="_blank">where, limit, skip, sort, count</a> - common used mongoose queries (used req.query to send parameters)
			<li><a href="/examples/mongoose/36querymostused-distinct" target="_blank">distinct</a> - return non-duplicated values
			<li><a href="/examples/mongoose/36querymostused-regex?qs=from%20array" target="_blank">regex(field, regExp)</a> - regex search
			<li><a href="/examples/mongoose/36querymostused-select?qs=from%20array" target="_blank">select('field1 field2 ...')</a> - determine which fields will be shown
			<li><a href="/examples/mongoose/37querysearch-find?qs=from%20array" target="_blank">find, findOne</a> - find many and find one
			<li><a href="/examples/mongoose/38querylogic-gt-lt" target="_blank">gt, lt</a> - results between two numbers
			<li><a href="/examples/mongoose/38querylogic-and-or" target="_blank">and, or</a> - and() , or() usage <b>.or([{ color: 'red' }, { status: 'emergency' }])</b>
			<li><a href="/examples/mongoose/39queryarray-all" target="_blank">.all('obj.arr_num', [5, 8, 13, 21]</a> - field must be array and must contain all elements from given array
			<li><a href="/examples/mongoose/39queryarray-in" target="_blank">.in('num', [5, 13, 22, 33])</a> - field must be non-array (String, Number ...etc) and must be contained in given array
			<li><a href="/examples/mongoose/39queryarray-elemmatch" target="_blank">.elemMatch('obj.arr_str', {$regex: /MARK/ig})</a> - field must be array and one of elements must match criteria
			<li><a href="/examples/mongoose/39queryarray-size" target="_blank">.size('obj.arr_str', 0)</a> - field must be array and must contain given number of elements
			<li><a href="/examples/mongoose/39queryarray-slice" target="_blank">.slice('obj.arr_str', -2)</a> - reduces number of array elements
			<li><a href="/examples/mongoose/40queryoper-remove" target="_blank">.remove(criteria)</a> - delete all docs matching query criteria
			<li><a href="/examples/mongoose/40queryoper-update" target="_blank">.update(criteria, newDoc, options)</a> - update all docs matching query criteria
			<li><a href="/examples/mongoose/41querymisc-dollarwhere" target="_blank">.$where(JSfunction)</a> - JS function or expression passed to mongodb query (must return true or false)
			<li><a href="/examples/mongoose/41querymisc-comment" target="_blank">.comment('Some comment!')</a> - add comment
			<li><a href="/examples/mongoose/41querymisc-cursor-stream" target="_blank">.cursor().on('data', fja).on('end', fja)</a> - use cursor on data stream
			<li><a href="/examples/mongoose/41querymisc-exists" target="_blank">.exists(path)</a> - returns docs where mongo path exists
			<li><a href="/examples/mongoose/41querymisc-merge" target="_blank">query.merge(query2)</a> - merge results from query and query2
			<li><a href="/examples/mongoose/41querymisc-setoptions" target="_blank">.setOptions({}})</a> - sets query options like limit, skip, sort, .... <a href="http://mongoosejs.com/docs/api.html#query_Query-setOptions">all options</a>

		</ol>




		<br><br><br><br>
		<h4>Cursor() - new API for query stream</h4>
		<a href="http://thecodebarbarian.com/cursors-in-mongoose-45.html" target="_blank">Read</a> the doc ahttp://mongoosejs.com/docs/guide.htmlbout mongoose cursor.
		Also <a href="https://strongloop.com/strongblog/whats-new-io-js-beta-streams3/" target="_blank">NodeJS stream</a> explanation.





		<br><br>
		<h4>Multiple db connections</h4>
		Sometimes an app will use several databases. In that case we need to ensure multiple database connection with one mongoose instance.
		<br>Instead of <b>mongoose.connect()</b> use <b>var conn = mongoose.createConnection();</b>
		<br>Docs:
		<a href="http://mongoosejs.com/docs/2.7.x/docs/indexes.html" target="_blank">http://mongoosejs.com/docs/2.7.x/docs/indexes.html</a> and
		<a href="https://docs.mongodb.com/manual/indexes/" target="_blank">https://docs.mongodb.com/manual/indexes/</a>
		<ol>
			<li><a href="/examples/mongoose/60multiconn-dynamic" target="_blank">dynamic connection</a> - set db connection on the fly when express route is called
			<li><a href="/examples/mongoose/60multiconn-merge" target="_blank">multiple connection</a> - get results from 2 databases and return merged data
		</ol>






	</main>


	<br><br><br>
	<%- include('../_partials/20footer'); -%>
</body>
</html>
